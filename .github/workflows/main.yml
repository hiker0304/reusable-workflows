name: Build Docker Image for Dev

on:
  workflow_call:
    inputs:
      APP_NAME:
        required: True
        type: string    
      DOCKER_FILE:
        required: True
        type: string  
      APP_PORT:
        required: True
        type: string     
      SOURCE_PATH:
        required: True
        type: string    
    secrets:
      SAMSUNG_DOCKERHUB_USERNAME:
        required: true          
      SAMSUNG_DOCKERHUB_TOKEN:
        required: true  
      BUILD_COMMON_TOKEN:
        required: true     
      IOT_RELENG_AWS_ACCESS_KEY_ID:
        required: true                                  
      IOT_RELENG_AWS_SECRET_ACCESS_KEY:
        required: true          
jobs:        
  build-docker:
    runs-on: [ iot-action  ]
    steps:
      - uses: actions/checkout@v2
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.SAMSUNG_DOCKERHUB_USERNAME }}
          password: ${{ secrets.SAMSUNG_DOCKERHUB_TOKEN }}

      - name: Checkout tools repo
        uses: actions/checkout@v2
        with:
          repository: iot/iot-build-common
          token: ${{ secrets.BUILD_COMMON_TOKEN }}
          path: build-common
      - name: Checkout Dockerfile
        uses: actions/checkout@v2
        with:
          repository: iot/iot-dockerfile
          token: ${{ secrets.BUILD_COMMON_TOKEN }}
          path: df
      - uses: actions/download-artifact@v2
        with:
          name: jar-artifact
          path: pengyou-web/build/libs/
      - name: Download version.
        uses: actions/download-artifact@v2
        with:
          name: version
          path: ./
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.IOT_RELENG_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.IOT_RELENG_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push image to Amazon ECR for Master
        id: docker-build
        env:
          DOCKER_ECR_REGION: us-east-2
          REGISTRY_ID: 926959129150
          APP_PORT: ${{ inputs.APP_PORT }}
          DOCKER_FILE: ${{ inputs.DOCKER_FILE }}
          SOURCE_PATH: ${{ inputs.SOURCE_PATH }}
          APP_NAME: ${{ inputs.APP_NAME }}
        run: |
          export DOCKER_IMG="${REGISTRY_ID}.dkr.ecr.${DOCKER_ECR_REGION}.amazonaws.com/${APP_NAME}"
          
          if [ $GITHUB_REF_NAME = "master" ]; then
            echo "Master Branch"
            build-common/action/docker_builder_ghe.py --region $DOCKER_ECR_REGION --dockerfile df/${DOCKER_FILE} --image $DOCKER_IMG --tag $(cat version.txt)-$GITHUB_SHA --build-arg SOURCE_PATH=${SOURCE_PATH} --build-arg APP_NAME=${APP_NAME} --build-arg APP_PORT=${APP_PORT} --stg-release False
          elif [ $GITHUB_REF_NAME = "release" ]; then
            echo "Release Branch"
            build-common/action/docker_builder_ghe.py --region $DOCKER_ECR_REGION --dockerfile df/${DOCKER_FILE} --image $DOCKER_IMG --tag $(cat version.txt)-$GITHUB_SHA --build-arg SOURCE_PATH=${SOURCE_PATH} --build-arg APP_NAME=${APP_NAME} --build-arg APP_PORT=${APP_PORT} --version ${APP_NAME}-$(cat version.txt) --stg-release True
          else
            echo "This branch is neither Master nor Release"
          fi
          
          docker images
          
      - name: Image digest
        run: |
          echo ${{ steps.docker_build.outputs.digest }}
